# Library Management System using OOP and File Handling

class Book:
    def __init__(self, book_id, title, author):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.available = True

    def __str__(self):
        status = "Available" if self.available else "Issued"
        return f"{self.book_id} - {self.title} by {self.author} [{status}]"


class Member:
    def __init__(self, member_id, name):
        self.member_id = member_id
        self.name = name
        self.borrowed_books = []

    def __str__(self):
        return f"{self.member_id} - {self.name}"


class Library:
    def __init__(self):
        self.books = []
        self.members = []

    def save_to_file(self):
        with open("file.txt", "w") as f:
            f.write(" BOOKS:\n")
            for book in self.books:
                f.write(f"{book}\n")
            f.write("\nMEMBERS:\n")
            for member in self.members:
                borrowed = ", ".join([book.title for book in member.borrowed_books]) or "None"
                f.write(f"{member} | Borrowed: {borrowed}\n")

    def add_book(self, book):
        self.books.append(book)
        self.save_to_file()
        print(f" Book '{book.title}' added successfully.")

    def add_member(self, member):
        self.members.append(member)
        self.save_to_file()
        print(f" Member '{member.name}' registered successfully.")

    def display_books(self):
        print("\n Available Books in Library:")
        if not self.books:
            print(" No books added yet.")
        for book in self.books:
            print(book)

    def display_members(self):
        print("\n Registered Members:")
        if not self.members:
            print(" No members added yet.")
        for member in self.members:
            print(member)

    def borrow_book(self, member_id, book_id):
        member = next((m for m in self.members if m.member_id == member_id), None)
        book = next((b for b in self.books if b.book_id == book_id), None)

        if not member:
            print(" Member not found!")
            return
        if not book:
            print(" Book not found!")
            return
        if not book.available:
            print(" Book already issued!")
            return

        member.borrowed_books.append(book)
        book.available = False
        self.save_to_file()
        print(f" {member.name} borrowed '{book.title}'.")

    def return_book(self, member_id, book_id):
        member = next((m for m in self.members if m.member_id == member_id), None)
        if not member:
            print(" Member not found!")
            return

        for book in member.borrowed_books:
            if book.book_id == book_id:
                book.available = True
                member.borrowed_books.remove(book)
                self.save_to_file()
                print(f" '{book.title}' returned by {member.name}.")
                return

        print(" Book not found in member's borrowed list.")



library = Library()

print(" Welcome to the Library Management System")

while True:
    print("\n MENU:")
    print("1 - Add Book")
    print("2 - Add Member")
    print("3 - Borrow Book")
    print("4 - Return Book")
    print("5 - Display All Books")
    print("6 - Display All Members")
    print("0 - Exit")

    try:
        choice = int(input("Enter your choice: "))
    except ValueError:
        print(" Please enter a valid number.")
        continue

    if choice == 1:
        try:
            book_id = int(input("Enter Book ID: "))
            title = input("Enter Book Title: ")
            author = input("Enter Book Author: ")
            new_book = Book(book_id, title, author)
            library.add_book(new_book)
        except Exception as e:
            print(f" Invalid input. Error: {e}")

    elif choice == 2:
        try:
            member_id = int(input("Enter Member ID: "))
            name = input("Enter Member Name: ")
            new_member = Member(member_id, name)
            library.add_member(new_member)
        except Exception as e:
            print(f" Invalid input. Error: {e}")

    elif choice == 3:
        try:
            member_id = int(input("Enter Member ID: "))
            book_id = int(input("Enter Book ID to borrow: "))
            library.borrow_book(member_id, book_id)
        except Exception as e:
            print(f" Invalid input. Error: {e}")

    elif choice == 4:
        try:
            member_id = int(input("Enter Member ID: "))
            book_id = int(input("Enter Book ID to return: "))
            library.return_book(member_id, book_id)
        except Exception as e:
            print(f" Invalid input. Error: {e}")

    elif choice == 5:
        library.display_books()

    elif choice == 6:
        library.display_members()

    elif choice == 0:
        print(" Exiting the system. Thank you!")
        break

    else:
        print(" Invalid choice. Please try again.")
